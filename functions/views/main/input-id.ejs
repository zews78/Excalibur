<%- include('./Delta/header') %>

<script src="https://rawgit.com/sitepoint-editors/jsqrcode/master/src/qr_packed.js"></script>

<link rel="stylesheet" href="/css/inputid.css">



<%- include('./Delta/navbar') %>

  
  <div class="container w-75">
    <h3><b>Centre Name:<%center.centre_name%></b></h3>
    <form action="/center/centerEymployees/ticketId/<%=center.id%>" method="POST" id="form">
      <div class="form-group">
        <label for="exampleFormControlTextarea1">Scan your QR code</label>
        <input type="text" name="ticketId" id="ticketId">
      </div>
      <button type="submit" name="button">Enter</button>
    </form>
  </div>

  <div id="container">
    <h1>QR Code Scanner</h1>

    <a id="btn-scan-qr">
      <img src="https://uploads.sitepoint.com/wp-content/uploads/2017/07/1499401426qr_icon.svg">
      <a />

      <canvas hidden="" id="qr-canvas"></canvas>

      <div id="qr-result" hidden="">
        <b>Data:</b> <span id="outputData"></span>
      </div>
  </div>

  

  <script type="text/javascript">
    const qrcode1 = window.qrcode;

    const video = document.createElement("video");
    const canvasElement = document.getElementById("qr-canvas");
    const canvas = canvasElement.getContext("2d");

    const qrResult = document.getElementById("qr-result");
    const outputData = document.getElementById("outputData");
    const btnScanQR = document.getElementById("btn-scan-qr");

    let scanning = false;

    const form = document.getElementById('form');
    const ticketId = document.getElementById('ticketId');

    btnScanQR.onclick = () => {
      navigator.mediaDevices
        .getUserMedia({
          video: {
            facingMode: "environment"
          }
        }) //environment is for geting camera at the back    //this function is used to ask permission for camera nad microphone use also stream stores the result
        .then(function(stream) {
          scanning = true;
          qrResult.hidden = true;
          btnScanQR.hidden = true;
          canvasElement.hidden = false;
          video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen
          video.srcObject = stream;
          video.play();
          tick();
          scan();
        });
    };

    function tick() {
      canvasElement.height = video.videoHeight;
      canvasElement.width = video.videoWidth;
      canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);

      scanning && requestAnimationFrame(
      tick); //This is a classic frame-by-frame loop. We’re setting the hight and width of the canvasElement to the dimensions of the video. Then we draw the video to the canvas and at the bottom we use requestAnimationFrame and pass in the tick function so that it will be called again when the browser draws the next frame. We’re doing this conditionally to the scanning variable being true.
    }

    function scan() {
      try {
        qrcode1.decode(); //automatically looks for a canvas with id of qr-code to get the image and decode
      } catch (e) {
        setTimeout(scan, 300); //this will scan the frame every 300 milisecs until it gets a qr code
      }
    }

    qrcode1.callback = (res) => { //assigning a callback when it detects a qr code res stores the reasult of the scan
      if (res) {
        outputData.innerText = res;
        scanning = false;

        video.srcObject.getTracks().forEach(track => {
          track.stop();
        });

        qrResult.hidden = false;
        btnScanQR.hidden = false;
        canvasElement.hidden = true;
        ticketId.value = res;
        form.submit();
      }
    };
  </script>


<%- include('./Delta/footer') %>

